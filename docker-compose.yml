services:
  # 1. Database Service
  db:
    image: postgres:14-alpine
    container_name: ev_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    image: "redis:alpine"
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - ev_network

  # 2. User Service
  user-service:
    build: ./services/user-service
    container_name: user_service
    command: gunicorn --bind 0.0.0.0:5000 "app:create_app()"
    volumes:
      - ./services/user-service:/app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ev_network

  # 3. Listing Service
  listing-service:
    build: ./services/listing-service
    container_name: listing_service
    command: gunicorn --bind 0.0.0.0:5001 "app:create_app()"
    volumes:
      - ./services/listing-service:/app 
      - listing_uploads:/app/uploads
    environment: 
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=development
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ev_network

  # 4. API Gateway (Nginx)
  api-gateway:
    build: ./api-gateway
    container_name: api_gateway
    ports:
      - "80:80"
    volumes: 
      - listing_uploads:/usr/share/nginx/html/uploads:ro
    # --------------------
    depends_on:
      - user-service
      - listing-service
    networks:
      - ev_network

  # 5. Frontend Service (Nginx)
  frontend:
    build: ./frontend
    container_name: frontend_server
    ports:
      - "8080:80"
    networks:
      - ev_network

# Định nghĩa network
networks:
  ev_network:
    driver: bridge

# Định nghĩa volume
volumes:
  postgres_data:
  listing_uploads: